/*작성자: 변준영
  사용 알고리즘: 컨벡스헐 트리, 다이나믹 프로그래밍,
  사용 자료구조: 스택
  문제 이름: 나무자르기
  [출처] 컨벡스 헐 트릭(Convex Hull Trick) | 작성자 라이
  여기서 추가 설명 및 보강을 함
  알아야 할 것 : https://wcipeg.com/wiki/Convex_hull_trick
  특공대는 새로 작성 예정
*/
#include <cstdio>
#include <algorithm>
using namespace std;
const int MAX = 100000;

struct LinearFunc { 
    // f(x) = ax + b, x >= s
    //b[i]기울기, d[i]는 절편의 역할
    long long a, b;
    //이건 어디서 부터 유효하다(컨백스헐 참고)
    double s;
    //생성 함수 람다

    LinearFunc() : LinearFunc(1, 0) {}
    LinearFunc(long long a1, long long b1) : a(a1), b(b1), s(0) {}
};
// 두 직선 f, g의 교점의 x좌표를 구함(by 두 일차방정식의 해)

/*
    //다이나믹 프로그래밍의 성립 조건
    //부분 문제 만족
    //메모이제이션
    //바텀업 방식 선호


    //결국에는 N-1 번째 인덱스 나무를 1로 만드는데 드는 비용의 최솟값
    //다이나믹프로그래밍의 점화식을 만들기 위한 조건
    //결국에 N-1번째의 나무를 잘라내면 나머지 부분은 충전 비용이 0이기에 결국에는 N-1번째 나무의 길이를 0(충전상태), 1(방전상태)로 만들어야 한다.
    //이를 통해 부분문제를 해결하기 위한 점화식은 크게 2가지가 있는데
    //0인 경우 어떤 문제가 발생하느냐 하면, 부분문제 해결에 따라서 다음 문제를 해결해야할때 충전 비용을 갱신 시켰다는 사실을 전해주고, 0이 된 이후 충전 비용은 기존의 비용처리와 다르다.
    //즉 dp[i]=min(dp[j]+a[i]b[j])+b[i]라는 이쁘지 못한 식이 나온다.
    //반면 길이를 1로 하는 경우에는 1인 j번째 나무를 자르는 비용 b[j], i번째 나무를 a[i]-1번 자르는 비용 (a[i]-1)*b[j]로 식을 정리하면
    다이나믹 프로그래밍의 점화식은 이런 이쁜식이 나온다
    //dp[i]=min(dp[j]+a[i]b[j])(0<=j<i)
    //이때 다이나믹프로그래밍만 사용하면 시간복잡도는 O(N^2)가 나오고 N<=100000 이므로 시간초과가 난다.
    //a[i]가 순 증가
    //b[i]가 순 감소하므로 CHT 사용이 가능하다
    //이때 이 함수를 일차함수로 처리하면, 함수가 점점 기울기가 감소, y절편의 길이가 증가한다는 것을 의미한다
    //그렇다는 것은 a[i]가 주어졌을때의 최솟값을 일차함수의 조합을 통해 쉽게 구할 수 있다는 것을 의미한다.dp[i]
    //convex 함수 한어로: 볼록함수라고 하는데, 가속도가 점점 감소한다는 것을 의미한다.

 */

inline double cross(LinearFunc& f, LinearFunc& g) 
{
    return (g.b - f.b) / (f.a - g.a);
}
int N, A[MAX], B[MAX];
// dp[0] = 0, dp 테이블을 채우면서 "f(.) = B[i]*x + dp[i]" 를 스택에 쌓음
long long dp[MAX] = { 0 };
//스택 장성
LinearFunc f[MAX];

int main() 
{
    // 입력받기
    scanf("%d", &N);
    for (int i = 0; i < N; ++i)
        scanf("%d", A + i);
    for (int i = 0; i < N; ++i)
        scanf("%d", B + i);
    

    
    //스택
    int top = 0;
    //그 전값이 위치해 있는 함수 찾기
    int fpos = 0;


    for (int i = 1; i < N; ++i) {
        // i-1번에 해당하는 새로운 직선을 스택의 top에 쌓음
        LinearFunc g(B[i - 1], dp[i - 1]);

        while (top > 0) {
            //교점 구하기
            g.s = cross(f[top - 1], g);
            
            if (f[top - 1].s < g.s) break;
            // 쌓기 전에, top과 교점을 구해서 top의 시작점보다 교점이 앞이면 pop
            // 이유 보충 설명: g.s의 교점이 f.s(스택의 가장 윗부분, 기울기 가장 낮음)보다 크면은 그 점보다 앞에있으면 반드시 g를 사용하는 부분이 정해이다. 가 정해이다.
            // g.s
            // 이때, fpos가 top이었으면 fpos도 맞춰서 감소((이거랑 관련 없이)참조하던 선분이 스택에서 사라짐)
            // fpos는 그전 값이 어느 함수를 참조하는지 알려주는 인덱스인데, 사라지면 당연히 거기에 맞게 감소시켜줘야 한다.
            if (--top == fpos) --fpos;
        }
        //새로운 함수 스택에 추가
        f[top++] = g;

        long long x = A[i];
        // fpos가 x좌표를 포함할 때까지 증가시킴
        while (fpos + 1 < top && f[fpos + 1].s < x) ++fpos;
        //dp[i]값 갱신
        dp[i] = f[fpos].a * x + f[fpos].b;
    }


    // 결과 출력
    printf("%lld\n", dp[N - 1]);
}
